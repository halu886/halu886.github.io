<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>[置顶]blog迁移至阿里云服务器</title>
      <link href="/2018/07/06/%E7%BD%AE%E9%A1%B6-gitpage%E8%BF%81%E7%A7%BB%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/07/06/%E7%BD%AE%E9%A1%B6-gitpage%E8%BF%81%E7%A7%BB%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="自2018-7-6号起，基于gitpage搭建个人blog迁置个人服务器"><a href="#自2018-7-6号起，基于gitpage搭建个人blog迁置个人服务器" class="headerlink" title="自2018/7/6号起，基于gitpage搭建个人blog迁置个人服务器"></a><strong>自2018/7/6号起，基于gitpage搭建个人blog迁置<a href="http://halu886.cn:4000/" target="_blank" rel="noopener">个人服务器</a></strong></h1><p>由于以下原因，很不舍就要放弃刚刚搭建没多久的这个静态页面(滑稽)。  </p><p>主要有以下原因：  </p><p>github相关资源的加载实在是太太太太太太慢了！</p><blockquote><p>做了以下操作，做cdn静态资源加速，但是！公共的cdn服务器都没有缓存hexo和aria用的工具包。<br>那么我自己搭一个咯。。。。。oss空间了解了后，<br>得绑定域名吧？<br>还得备案吧？<br>备案得要服务器吧？<br>然后就脑子一热就往阿里baba那里冲了钱。。。<br>再然后突然醒悟！<br>既然如此，我TMD不直接用把blog放在服务器上呢？<br>还加速个球喔！</p></blockquote><p>以上就是本咸鱼的心路历程（鞠躬）~</p>]]></content>
      
      
        <tags>
            
            <tag> 通知 </tag>
            
            <tag> 置顶 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>闭包浅谈</title>
      <link href="/2018/07/02/%E9%97%AD%E5%8C%85%E6%B5%85%E8%B0%88/"/>
      <url>/2018/07/02/%E9%97%AD%E5%8C%85%E6%B5%85%E8%B0%88/</url>
      <content type="html"><![CDATA[<blockquote><p><strong>该文章阅读需要8分钟,更多文章请点击本人博客<a href="http://halu886.cn:4000" target="_blank" rel="noopener">halu886</a></strong></p></blockquote><hr><blockquote><p>当函数可以记住并访问所在的词法作用域，即使是在当前作用域外执行，这时就产生了闭包. —–&lt;&lt;你不知道的JavaScript(上卷)&gt;&gt; </p></blockquote><!-- TOC --><ul><li><a href="#本质">本质</a></li><li><a href="#回调闭包">“回调===闭包”</a></li><li><a href="#循环和闭包">循环和闭包</a></li></ul><!-- /TOC --><p><strong>闭包是基于词法作用域书写代码时所自然产生的结果.</strong></p><h1 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h1><pre><code>function foo(){    var a = &apos;test&apos;;    function bar(){        console.log(a);    }    bar()//test;}</code></pre><p>由词法作用域概念我们可以将这段代码理解为foo()中存在一个<strong>作用域</strong>，bar()中存在一个词法<strong>作用域</strong>  </p><p>foo作用域包含bar作用域，bar作用域被foo作用域包含.  </p><p>且根据词法作用域可知对于变量的检索可以由当前作用域向上层作用域进行遍历直至顶层作用域.  </p><pre><code>function foo(){    var a = &apos;test&apos;;    function bar(){        console.log(a);    }    return bar;}var baz = foo();baz();//test</code></pre><p>bar函数所含有的作用域引用了foo函数的作用域，且当执行foo()时，bar函数作为一个返回值返回，baz变量引用着词法作用域，当bar在全局作用域下执行时，bar指向的作用域既能访问foo指向的作用域，还能指向全局作用域.</p><p>按照JavaScript引擎执行逻辑作用域在执行完后且没有被引用后就会被垃圾回收机制回收，但是当foo()方法执行完，baz依旧引用bar方法的作用域，那么foo()执行完后依旧存在引用，foo作用域将不会被回收.</p><pre><code>var fn;function foo(){    var a = 2;    function bar(){        console.log(a);    }    fn = bar;}function baz(){    fn();}foo()baz()//2</code></pre><p><strong>只要作用域内部的子作用域被作用域外引用并执行就构成了闭包</strong></p><h1 id="“回调-闭包”"><a href="#“回调-闭包”" class="headerlink" title="“回调===闭包”"></a>“回调===闭包”</h1><p>在jquery，定时器，触发事件等等中大量的第三方API存在回调函数，比方说:  </p><pre><code>function fn(message){    setTimeout(function time(){ //回调===闭包        console.log(message);    }，1000)}fu(&apos;test&apos;)//test</code></pre><p>在大部分（<em>几乎所有</em>）的第三方API中的回调都属于闭包(<em>在作用外执行方法</em>)</p><h1 id="循环和闭包"><a href="#循环和闭包" class="headerlink" title="循环和闭包"></a>循环和闭包</h1><p>在关于大部分闭包的思考中，都会提到循环和传入定时器中闭包所产生的问题  </p><pre><code>for(var i=0;i&lt;5;++i){    setTimeout(function(){        console.log(i);    }，1000);}//5//5//5//5//5</code></pre><p>首先我们得先理解<strong>定时器中回调函数执行的时刻是在for循环结束后</strong>，那么向事件循环中设置的五个匿名函数是for循环遍历完后才执行的。  </p><p>根据之前我们梳理的概念，匿名函数所指向的作用域能够访问上一级的作用域，此时上一级的作用域的i变量指向常量5.</p><p><strong>那么问题来了?</strong><br>如何达到我们想要的效果，每次输出植入定时器是循环索引?  </p><p><strong>方法1</strong>:  </p><pre><code>//作用域afor(var i=0;i&lt;5;++i){    (function(){        //作用域b        var j = i;        setTimeout(function(){            //作用域c            console.log(j);        }，1000);    })();}//0//1//2//3//4</code></pre><p>这里我们用的思路是嵌套一层作用域进行保存索引i。遍历五次后，<strong>多生成</strong>五个作用域b，里面分别保存各次遍历时的索引i(定义一个新变量j指向索引常量).  </p><p>当回调执行时先在作用域c寻找变量j，没有得到时，再去上一层作用域b，找到了后停止向上遍历，输出j。</p><p><strong>方法2</strong>:  </p><pre><code>//作用域afor(let i = 0;i&lt;5;++i){//es6语法let关键字    //作用域b    setTimeout(function(){        //作用域c        console.log(j);    }，1000);}//0//1//2//3//4</code></pre><p>这里运用了es6中的let关键字，生成块级作用域本质上和方法一同理，这里不再赘述.</p><p>以上就是对闭包的总结，大部分js中模式都风骚的运用了闭包的特性。更多知识建议阅读《你不知道的JavaScript》</p>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 阅后总结 </tag>
            
            <tag> 你不知道的JavaScript(上卷) </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实习总结</title>
      <link href="/2018/06/28/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2018/06/28/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote><p><strong>该文章阅读需要12分钟,更多文章请点击本人博客<a href="https://halu886.github.io/" target="_blank" rel="noopener">halu886</a></strong></p></blockquote><hr><!-- TOC --><ul><li><a href="#工作">工作</a><ul><li><a href="#输出">输出</a></li><li><a href="#反思与总结">反思与总结</a><ul><li><a href="#反思">反思</a></li><li><a href="#总结">总结</a></li></ul></li><li><a href="#未来展望">未来展望</a></li></ul></li></ul><!-- /TOC --><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><img src="/images/工作输出.png" alt="季度输出"></p><p>表格中大致汇总了实习期间一年下来的在公司所埋得坑:-)  </p><p>工作期间虽然走过很多弯路,被领导diss了不少次,但所幸自己成长的速度还算更上进度而且也稍微达到了预期的一部分:-)</p><p>在实习期间主要是在大eAudit项目组中担任前后端的开发.也支援过common模块和PQM模块,同时还本着”<em>机会是留给敢背锅的人</em>“的原则担起过官网项目和调漆项目.    </p><p>总结实现了<strong>10个以上</strong>需求,整改了<strong>85个以上</strong>优化项,修复了<strong>143个以上的bug</strong>.而且随着工作时长的增加,输出的质量和效率都有了飞跃的提升:-)  </p><p>但是在以上工作经验中接触的面越来越广,所需要的知识也越来越多和迫切.深感自己在很多方面的欠缺.这也是不断的在激励我不断学习不断成长</p><blockquote><p>落后就要挨打</p></blockquote><h2 id="反思与总结"><a href="#反思与总结" class="headerlink" title="反思与总结"></a>反思与总结</h2><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><ul><li>成长不够多元</li><li>空闲时间利用不够合理  </li></ul><p>Q2的时候除了工作以外大部分时间都花在了六级复习和毕设的编写上.结果最后回学校的时候,由于论文规范完全不达标,相关设计和需求分析一点也不专业导致被老师骂惨了.  </p><p>这时候我才发现实习一年后其实我只学会如何代码打交道,接到一个明确的目的通过编程的方式实现.在软件工程其他方面所涉及的工作所知道还停留在学校里的水平.  </p><p>一直都坚持上班前和下班后花时间积累和成长,但也确实走了不少弯路,所需要使用的各种技术的书都看了很多,Demo也练习了不少.但是产出没有想象的大.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>职业规划越来清晰</li><li>在技术增强的道理上逐渐摸索出适合自己方法</li></ul><p>虽然踩了很多坑,可是慢慢的对于自己的职业规划越来越清晰明了.</p><ol><li>作为一个应届生码农应该如何成长?</li><li>工作和个人能力应该如何实现互相促进的效果?</li><li>短期内的目标和规划是什么?</li></ol><p>这些问题都慢慢都开始有了自己的答案  </p><p>且在工作和学习的过程,本学渣也逐渐懂得了如何用有效率和投入的方式来学习,而且懂得了如何平衡工作和学习还有生活三者.</p><h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><ul><li>承担更多职责锻炼自己<br>  方案:  <ul><li>任务分工时勇于承担和尝试</li><li>敢于接触陌生的领域</li></ul></li><li>保持求知欲<br>  方案:  <ul><li>坚持业余时间学习</li><li>定制每周写<a href="http://halu886.github.io/" target="_blank" rel="noopener">技术博客</a>计划</li></ul></li></ul><p>在工作中懂得了一个比较深刻的道理</p><blockquote><p>黑猫白猫能抓耗子就是好猫  </p></blockquote><p>无论知道多少理论和知识,不能及时合理的实现功能就是白搭.<br>只有在实践中才能检验个人能力.<br>所以希望在以后的工作生涯中全身心的投入到具体工作中,别出现本末倒置的情况.  </p><p>只有不断的成长才能不被淘汰,自制是通往幸福的唯一通道,共勉~</p>]]></content>
      
      <categories>
          
          <category> 工作 </category>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
            <tag> 工作 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript原生函数浅谈</title>
      <link href="/2018/06/26/JavaScript%E5%8E%9F%E7%94%9F%E5%87%BD%E6%95%B0%E6%B5%85%E8%B0%88/"/>
      <url>/2018/06/26/JavaScript%E5%8E%9F%E7%94%9F%E5%87%BD%E6%95%B0%E6%B5%85%E8%B0%88/</url>
      <content type="html"><![CDATA[<blockquote><p><strong>该文章阅读需要8分钟,更多文章请点击本人博客<a href="https://halu886.github.io/" target="_blank" rel="noopener">halu886</a></strong></p></blockquote><hr><!-- TOC --><ul><li><a href="#1原生函数基本概念">1.原生函数基本概念</a><ul><li><a href="#11原生函数是什么">1.1原生函数是什么</a></li><li><a href="#12作用是什么">1.2作用是什么</a></li><li><a href="#13补充">1.3补充</a></li></ul></li><li><a href="#2\\class\\">2.[[<strong>class</strong>]]</a></li><li><a href="#3封装对象包装">3.封装对象包装</a></li><li><a href="#4拆封">4.拆封</a></li></ul><!-- /TOC --><h1 id="1-原生函数基本概念"><a href="#1-原生函数基本概念" class="headerlink" title="1.原生函数基本概念"></a>1.原生函数基本概念</h1><h2 id="1-1原生函数是什么"><a href="#1-1原生函数是什么" class="headerlink" title="1.1原生函数是什么"></a>1.1原生函数是什么</h2><p><strong>JavaScript为基本数据类型提供了封装对象,被称为原生函数(native function),同时也叫内建函数(built-in function)</strong>  </p><p>常用的原生函数有:</p><ul><li>Number()</li><li>String()</li><li>Boolean()</li><li>Array()</li><li>Object()</li><li>Function()</li><li>RegExp()</li><li>Date()</li><li>Error()</li><li>Symbol()//ES6新加入!   </li></ul><h2 id="1-2作用是什么"><a href="#1-2作用是什么" class="headerlink" title="1.2作用是什么"></a>1.2作用是什么</h2><p><strong>为基本数据类型提供该子类所特有的方法和属性</strong>  </p><pre><code>比如说:String#trim(),Array#Array#concat()  </code></pre><h2 id="1-3补充"><a href="#1-3补充" class="headerlink" title="1.3补充"></a>1.3补充</h2><p>原生函数同时也能当做构造函数使用  </p><pre><code>let a = new String(&quot;abc&quot;);a instanceof String;//true</code></pre><p>通过构造函数创建了一个封装了基本数据类型的封装对象</p><h1 id="2-class"><a href="#2-class" class="headerlink" title="2.[[class]]"></a>2.[[<strong>class</strong>]]</h1><pre><code>let a = new String(&quot;abc&quot;);typeof a;//&quot;object&quot; </code></pre><p><strong>所有typeof返回的”object”的对象都有一个[[class]]属性</strong>  </p><pre><code>Object.prototype.toString.call(new String(&quot;abc&quot;));//&quot;[object String]&quot;Object.prototype.toString.call(new Number(1346));//&quot;[object Number]&quot;Object.prototype.toString.call(null);//&quot;[object Null]&quot;Object.prototype.toString.call(undefined);//&quot;[object Undefined]&quot;//返回一个字符串类型的基本类型数据,格式为[object Xxxxx]</code></pre><p>虽然不存在Null()和Undefined()原生函数,但是[[Class]]内部属性仍为这个</p><h1 id="3-封装对象包装"><a href="#3-封装对象包装" class="headerlink" title="3.封装对象包装"></a>3.封装对象包装</h1><p><strong>当基本数据类型需要调用原生对象的方法和属性时,JavaScript会自动进行对象封装(object wrapper)</strong>  </p><p><strong>疑问:既然如此为什么不直接在变量声明时,直接定义为封装对象?</strong></p><p><strong>思考:</strong></p><ol><li>JavaScript对基本数据类型的常见情况做了性能优化,直接使用封装对象来进行”<em>提前优化</em>“反而会降低执行效率</li><li><p>篡改数据类型,提升风险  </p><pre><code>let a = false;!!false;//falselet b = new Boolean(false);!!b;//true  //显性类型转换!!Object===&gt;true  </code></pre></li></ol><h1 id="4-拆封"><a href="#4-拆封" class="headerlink" title="4.拆封"></a>4.拆封</h1><p><strong>当需要用到封装对象的基本类型值时,就需要用到valueOf()</strong>  </p><pre><code>var a = new String(&quot;sadflk&quot;);var b = new Number(123);var c = new Boolean(true);a.valueOf()//&quot;sadflf&quot;b.valueOf()//123c.valueOf()//true</code></pre><p><strong>在需要用到基本类型值的时候会发生隐形拆封</strong></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 阅后总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 阅后总结 </tag>
            
            <tag> 你不知道的JavaScript(中卷) </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>意见审查Demo 总结</title>
      <link href="/2017/08/25/%E6%84%8F%E8%A7%81%E5%AE%A1%E6%9F%A5Demo-%E6%80%BB%E7%BB%93/"/>
      <url>/2017/08/25/%E6%84%8F%E8%A7%81%E5%AE%A1%E6%9F%A5Demo-%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#技术说明">技术说明</a><ul><li><a href="#mongodb">mongodb</a></li><li><a href="#nodejs">nodejs</a></li><li><a href="#webix">webix</a></li></ul></li></ul><!-- /TOC --><h1 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h1><h2 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h2><p>一张用户表user,一张数据表idea（意见）。</p><pre><code>//user表数据字段userName: String,//用户名称password: String //登入密码idea表数据字段productType: String, //产品类型headLine: String,  //标题phoneNum: String,  //联系方式status: String,    //状态 已回复/未回复/已完成reply: String,      //回复publishDate: Date,  //发布日期replyDate: Date,    //回复日期fileName: Array,    //图片名称filePath: Array,    //文件路径user_id: String    //引用用户ID</code></pre><p>mongodb 对象的操作用了mongoose模块封装了CURD操作</p><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>基于node.js中express模块搭建http服务<br>监听本地localhost：3000端口访问</p><p><strong>使用express4.x中的router中间件将请求分离成/user/以及/idea/.<br>将app.js中的请求转移到了./router/index.js</strong></p><pre><code>module.exports=function(app) {        /**主界面 */            app.get(&apos;/&apos;,index);//主页面请求            app.use(&apos;/user&apos;,user);//用户模块            app.use(&apos;/idea&apos;,idea);//意见模块        }</code></pre><p>在app.js只需要调用./router/index模块，就可以减少主界面请求的代码量<br><code></code>var index = require（./router/index）;<br>index(app);</p><p><strong>分别封装user和idea业务逻辑在模块中实例化express.router对象 ./router/idea.js ./router/idea.js</strong></p><pre><code>var router=require(&quot;express&quot;).Router();</code></pre><p><strong>在对外开放router对象</strong><br>    module.exports=router;</p><p><strong>mongoose封装对于对象的CURD操作<br>首先我先封装db数据库连接对象的创建</strong><br>    var mongoose=require(‘mongoose’);<br>    var url=’mongodb://localhost:27017/demo’;<br>    mongoose.connect(url);//连接<br>    module.exports=mongoose;</p><p>通过mongoose中封装好的scheme对象将我们数据字段封装好，通过model对象实例化，再导出包含一系列查询以及增加删除等等的操作的对象，简直就是开箱即用。</p><pre><code>var mongoose=require(&apos;./mongoose&apos;);var ideaSchema=new mongoose.Schema({   //Schema对象封装        /* idea数据字段*/});//idea对应的mongodb中的collection，传入Schema对象，将返回model对象对外开放module.exports=mongoose.model(&apos;idea&apos;,ideaSchema)</code></pre><h2 id="webix"><a href="#webix" class="headerlink" title="webix"></a>webix</h2><p><strong>在ejs渲染引擎下使用webix控件</strong></p><p><em>这一部份代码讲道理写得我有点蒙 = =<br>ejs通过渲染表达式动态传递值或者对html页面进行一些操作<br>然而webix就是通过封装控件，在js中传递json对象进行构造html中的节点<br>公司当时说要webix，我又脑子抽到了不愿意舍弃ejs（简直有毒，在这个demo里ejs的唯一作用就是将我conter内容整合到layout里面）。<br>为了能让ejs稍微有点作用，我在layout界面中写了构建页面中比较不容易改动的top和footer部分。<br>对你没想错，写在html内置的js中的，然后从不同的界面中传进去各自内置的js（因为webix主要的优势就是让你不用写html代码），所以ejs<code></code>最后整合到的一起的页面就是两个不同js脚本。感觉ejs在我这里基本没有作用<br>前端主要就是通过不同的控件构造一个个不同的页面加上一些按钮的触发事件发送webix中封装的ajax提交请求<br>代码我就不贴了，源码链接我也放出来了，有兴趣就自己去看看吧</em></p>]]></content>
      
      <categories>
          
          <category> node </category>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/08/24/hello-world/"/>
      <url>/2017/08/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
